{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red34\green45\blue53;}
{\*\expandedcolortbl;;\cssrgb\c17647\c23137\c27059;}
\paperw11900\paperh16840\margl1440\margr1440\vieww31180\viewh17020\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
import java.io.*;\'a0\
import java.util.*;\'a0\
public class Stack \{\
    private int stack_array[]; // integer array for stack\
    private int tos;\'a0\'a0 // tos \'96 top of stack\
    private int capacity; // number of elements stack can hold\
    Stack(int size) \{\
        stack_array = new int[size];\
        capacity = size;\
        tos = -1;\
    \}\
    // Function to add an element x in the stack\
    public void push(int x) \{\'a0\'a0\
        tos++;\'a0\'a0\
        stack_array[tos] = x;\'a0\'a0\
    \}\
    // Function to pop top element from the stack\
    public int pop() \{\'a0\'a0\
        int topNum = stack_array[tos];\'a0\'a0\
        stack_array[tos] = 0;\'a0\'a0\
        tos--;\'a0\'a0\
        return topNum;\
    \}\
    public int peek() \{\'a0\'a0\
        int topNum = stack_array[tos];\'a0\'a0\
        return topNum;\
    \}\
    // Function to return the size of the stack\
    public int size() \{\'a0\'a0\
        int stackSize = tos;\'a0\'a0\
        stackSize++;\'a0\'a0\'a0\'a0\
        return stackSize;\
    \}\
    // Function to check if the stack is empty or not\
    public Boolean isEmpty() \{\
        return tos < 0;\
    \}\
    // Function to check if the stack is full or not\
    public Boolean isFull() \{\
        return tos == 4;\
    \}\
    public void show() \{\'a0\'a0\
        System.out.print("The array is now: ");\'a0\'a0\
        for (int x: stack_array)\'a0\'a0 \{\'a0\'a0\'a0\'a0\
            System.out.print(x + " ");\'a0\'a0\
        \}\'a0\'a0\
        System.out.println("");\
    \}\
    public static void main(String[] args) \{\'a0\'a0\
        Stack stack1 = new Stack(5);\'a0\'a0\'a0\'a0\
        stack1.show();\'a0\'a0\
        System.out.println("Size is: " + stack1.size());\'a0\'a0\
        System.out.println("Empty: " + stack1.isEmpty());\
        System.out.println("Full: " + stack1.isFull());\
        System.out.println("");\
        stack1.push(5);\
        stack1.push(4);\
        stack1.push(3);\
        stack1.push(2);\
        stack1.show();\
        System.out.println("Size is: " + stack1.size());\
        System.out.println("Peek: The top number is: " + stack1.peek());\
        System.out.println("");\
        System.out.println(stack1.pop() + " was just popped");\
        System.out.println(stack1.pop() + " was just popped");\
        stack1.show();\
        System.out.println("Size is: " + stack1.size());\
        System.out.println("Peek: The top number is: " + stack1.peek());\
        System.out.println("");\
        stack1.push(3);\
        stack1.push(2);\
        stack1.push(1);\
        stack1.show();\
        System.out.println("Size is: " + stack1.size());\
        System.out.println("Peek: The top number is: " + stack1.peek());\
        System.out.println("Empty: " + stack1.isEmpty());\
        System.out.println("Full: " + stack1.isFull());\
    \}\
\}\'a0}